#version 410
in vec3 position;
in vec3 normal;
in vec4 color;
in vec2 textcoord;
in vec3 tangent;
in vec3 bitangent;
in ivec4 bone_ids;
in vec4 weights;

uniform mat4 model;

out VertexData
{
  vec4 position;
  vec4 normal;
  vec4 color;
  vec2 uv;
  vec3 tangent;
  vec3 bitangent;
  vec4 boneids;
} VertexOut;

uniform mat4 View;
uniform mat4 projection;
uniform int options;
uniform mat4 bones[60];

void main()
{
  if ((options/2) % 2 == 1)
  {
    mat4 skeleton = bones[bone_ids.x] * weights.x + 
                    bones[bone_ids.y] * weights.y + 
                    bones[bone_ids.z] * weights.z + 
                    bones[bone_ids.a] * weights.a;
    VertexOut.position = model * skeleton * vec4(position,1.0);
    VertexOut.normal = transpose(inverse(model* skeleton)) * vec4(normal, 0);
    VertexOut.tangent = (transpose(inverse(model* skeleton)) * vec4(tangent, 0)).xyz;
    VertexOut.bitangent = (transpose(inverse(model* skeleton)) * vec4(bitangent, 0)).xyz;
    VertexOut.boneids = bone_ids;
  }
  else
  {
    VertexOut.position = model*vec4(position,1.0);
    VertexOut.normal = transpose(inverse(model)) * vec4(normal, 0);
    VertexOut.tangent = (transpose(inverse(model)) * vec4(tangent, 0)).xyz;
    VertexOut.bitangent = (transpose(inverse(model)) * vec4(bitangent, 0)).xyz;
  }
  VertexOut.color = color;
  VertexOut.uv = textcoord;

  gl_Position = projection * View * VertexOut.position;
}
